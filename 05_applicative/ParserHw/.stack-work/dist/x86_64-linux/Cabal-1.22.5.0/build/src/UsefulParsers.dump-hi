
==================== FINAL INTERFACE ====================
2016-10-24 10:17:27.951507 UTC

interface Parse_8jvQSOrf1Ae9tCV8prCCeR:UsefulParsers 7103
  interface hash: 2a9a31c65776540fd4c8b2661a5f3f8a
  ABI hash: e9fcfcd7e4a12ebf1555f219d643ed90
  export-list hash: 84913e587f7744e2fabb60c13a05120a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  UsefulParsers.char
  UsefulParsers.ident
  UsefulParsers.oneOrMore
  UsefulParsers.posInt
  UsefulParsers.satisfy
  UsefulParsers.spaces
  UsefulParsers.zeroOrMore
module dependencies: Parser
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Parser dd420111856b97cefbec8ea69afca86e
  exports: 5dcaeb168f8770ff3c0fc30d8c671a87
  Parser a740369705ed0ae4c2123669c191563e
  Parser 9b019ae416d0f1d5997d31a1b5bd73d5
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
ac3a3f181ae13e046a92344002ea5ee5
  char :: GHC.Types.Char -> Parser.Parser GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                UsefulParsers.char1
                  `cast`
                (<GHC.Types.Char>_R
                 ->_R Sym (Parser.NTCo:Parser[0] <GHC.Types.Char>_R)) -}
1f041b4d59457ab9d9685fb98ae32bb1
  char1 ::
    GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.Maybe (GHC.Types.Char, GHC.Base.String)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ c :: GHC.Types.Char eta :: GHC.Base.String ->
                 case eta of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                   : x xs
                   -> case x of wild1 { GHC.Types.C# c1 ->
                      case c of wild2 { GHC.Types.C# c2 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqChar# c1 c2) of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (GHC.Types.Char, [GHC.Types.Char])
                             (wild1, xs) } } } }) -}
d36df007db5e28bfdc7ca4f2d1d1cc5e
  ident :: Parser.Parser GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                UsefulParsers.ident1
                  `cast`
                (Sym (Parser.NTCo:Parser[0] <[GHC.Types.Char]>_R)) -}
7bd0d8d7e730fe0cde3cf9a4577f2707
  ident1 ::
    GHC.Base.String
    -> GHC.Base.Maybe ([GHC.Types.Char], GHC.Base.String)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta4 :: GHC.Base.String ->
                 Parser.$fApplicativeParser3
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   UsefulParsers.ident3
                     `cast`
                   (Sym (Parser.NTCo:Parser[0]
                             <[GHC.Types.Char] -> [GHC.Types.Char]>_R))
                   UsefulParsers.ident_eta2
                   eta4) -}
33149693279767ed1c580a3bb7afc860
  ident2 ::
    GHC.Base.String -> GHC.Base.Maybe (GHC.Types.Char, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ s :: GHC.Base.String ->
                 case s of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                   : x xs
                   -> case x of wild1 { GHC.Types.C# c# ->
                      case {__pkg_ccall base-4.8.2.0 u_iswalpha GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# c#)
                             GHC.Prim.realWorld# of wild2 { (#,#) ds ds1 ->
                      case ds1 of wild3 {
                        DEFAULT
                        -> GHC.Base.Just @ (GHC.Types.Char, [GHC.Types.Char]) (wild1, xs)
                        0
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord#
                                     (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48))
                                     __word 9) of wild4 {
                             GHC.Types.False
                             -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ (GHC.Types.Char, [GHC.Types.Char])
                                  (wild1, xs) } } } } }) -}
f1db97801a52e02766ff565342e07d14
  ident3 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         ([GHC.Types.Char] -> [GHC.Types.Char], GHC.Base.String)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ s :: GHC.Base.String[OneShot] ->
                 case s of wild {
                   []
                   -> GHC.Base.Nothing
                        @ ([GHC.Types.Char] -> [GHC.Types.Char], GHC.Base.String)
                   : x xs
                   -> case x of wild1 { GHC.Types.C# c# ->
                      case {__pkg_ccall base-4.8.2.0 u_iswalpha GHC.Prim.Int#
                                                                -> GHC.Prim.State#
                                                                     GHC.Prim.RealWorld
                                                                -> (# GHC.Prim.State#
                                                                        GHC.Prim.RealWorld,
                                                                      GHC.Prim.Int# #)}
                             (GHC.Prim.ord# c#)
                             GHC.Prim.realWorld# of wild2 { (#,#) ds ds1 ->
                      case ds1 of wild3 {
                        DEFAULT
                        -> GHC.Base.Just
                             @ ([GHC.Types.Char] -> [GHC.Types.Char], GHC.Base.String)
                             (GHC.Types.: @ GHC.Types.Char wild1, xs)
                        0
                        -> GHC.Base.Nothing
                             @ ([GHC.Types.Char] -> [GHC.Types.Char],
                                GHC.Base.String) } } } }) -}
5575edf071de8560b49ecd06f41b4be1
  ident_eta2 :: Parser.Parser [GHC.Types.Char]
  {- Unfolding: (UsefulParsers.zeroOrMore
                   @ GHC.Types.Char
                   UsefulParsers.ident2
                     `cast`
                   (Sym (Parser.NTCo:Parser[0] <GHC.Types.Char>_R))) -}
6282fb1325e04af0bdee0aea3939c91d
  oneOrMore :: Parser.Parser a -> Parser.Parser [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,C(U)>,
     Unfolding: (\ @ a p :: Parser.Parser a ->
                 let {
                   eta2 :: Parser.Parser [a] = UsefulParsers.zeroOrMore @ a p
                 } in
                 let {
                   lvl :: GHC.Base.String
                          -> GHC.Base.Maybe ([a] -> [a], GHC.Base.String)
                     {- Arity: 1 -}
                   = \ s :: GHC.Base.String[OneShot] ->
                     case p `cast` (Parser.NTCo:Parser[0] <a>_R) s of wild {
                       GHC.Base.Nothing
                       -> GHC.Base.Nothing @ ([a] -> [a], GHC.Base.String)
                       GHC.Base.Just a2
                       -> GHC.Base.Just
                            @ ([a] -> [a], GHC.Base.String)
                            (case a2 of wild1 { (,) a3 c ->
                             (GHC.Base.++ @ a (GHC.Types.: @ a a3 (GHC.Types.[] @ a)), c) }) }
                 } in
                 (\ eta4 :: GHC.Base.String ->
                  Parser.$fApplicativeParser3
                    @ [a]
                    @ [a]
                    lvl `cast` (Sym (Parser.NTCo:Parser[0] <[a] -> [a]>_R))
                    eta2
                    eta4)
                   `cast`
                 (Sym (Parser.NTCo:Parser[0] <[a]>_R))) -}
7f2da07db9cc55cdf9a5fcdaa160cb63
  posInt :: Parser.Parser GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                UsefulParsers.posInt1
                  `cast`
                (Sym (Parser.NTCo:Parser[0] <GHC.Integer.Type.Integer>_R)) -}
91ae015bf66d431a1bdc59fd3a584f90
  posInt1 ::
    [GHC.Types.Char]
    -> GHC.Base.Maybe (GHC.Integer.Type.Integer, [GHC.Types.Char])
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ xs :: [GHC.Types.Char] ->
                 case GHC.List.$wspan
                        @ GHC.Types.Char
                        GHC.Unicode.isDigit
                        xs of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   []
                   -> GHC.Base.Nothing @ (GHC.Integer.Type.Integer, [GHC.Types.Char])
                   : ds1 ds2
                   -> GHC.Base.Just
                        @ (GHC.Integer.Type.Integer, [GHC.Types.Char])
                        (case Text.Read.readEither6
                                @ GHC.Integer.Type.Integer
                                (Text.ParserCombinators.ReadP.run
                                   @ GHC.Integer.Type.Integer
                                   UsefulParsers.posInt4
                                   wild) of wild1 {
                           [] -> UsefulParsers.posInt3
                           : x ds
                           -> case ds of wild2 {
                                [] -> x : ipv ipv1 -> UsefulParsers.posInt2 } },
                         ww2) } }) -}
c97a3c4695c5f043ca9c4462f13ce6fe
  posInt2 :: GHC.Integer.Type.Integer
  {- Strictness: b -}
789b54122134596a852f29fd45c6b893
  posInt3 :: GHC.Integer.Type.Integer
  {- Strictness: b -}
12b0335acc3238e02e3cecacc8426cc1
  posInt4 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: ((GHC.Read.$fReadInteger3
                    GHC.Read.$fReadInteger_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                      <GHC.Integer.Type.Integer>_R)
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
e02842adfb453476602dbe64b4060d0f
  satisfy ::
    (GHC.Types.Char -> GHC.Types.Bool) -> Parser.Parser GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                UsefulParsers.satisfy1
                  `cast`
                (<GHC.Types.Char -> GHC.Types.Bool>_R
                 ->_R Sym (Parser.NTCo:Parser[0] <GHC.Types.Char>_R)) -}
80a36b721b55184c836482f6d17767c6
  satisfy1 ::
    (GHC.Types.Char -> GHC.Types.Bool)
    -> [GHC.Types.Char]
    -> GHC.Base.Maybe (GHC.Types.Char, [GHC.Types.Char])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: GHC.Types.Char -> GHC.Types.Bool ds :: [GHC.Types.Char] ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                   : x xs
                   -> case p x of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (GHC.Types.Char, [GHC.Types.Char])
                             (x, xs) } }) -}
833751dd4c874129b0b2312bbfc6d286
  spaces :: Parser.Parser GHC.Base.String
  {- Unfolding: (UsefulParsers.zeroOrMore
                   @ GHC.Types.Char
                   UsefulParsers.spaces1
                     `cast`
                   (Sym (Parser.NTCo:Parser[0] <GHC.Types.Char>_R))) -}
99655a949430c8a657b65a208900e947
  spaces1 ::
    [GHC.Types.Char]
    -> GHC.Base.Maybe (GHC.Types.Char, [GHC.Types.Char])
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: [GHC.Types.Char] ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                   : x xs
                   -> case x of ww { GHC.Types.C# ww1 ->
                      let {
                        a1 :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww1)
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a1 __word 887) of wild1 {
                        GHC.Types.False
                        -> case {__pkg_ccall base-4.8.2.0 u_iswspace GHC.Prim.Int#
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Prim.Int# #)}
                                  (GHC.Prim.ord# ww1)
                                  GHC.Prim.realWorld# of wild2 { (#,#) ds1 ds2 ->
                           case ds2 of wild3 {
                             DEFAULT
                             -> GHC.Base.Just @ (GHC.Types.Char, [GHC.Types.Char]) (ww, xs)
                             0 -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char]) } }
                        GHC.Types.True
                        -> case a1 of wild2 {
                             DEFAULT
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.leWord#
                                          (GHC.Prim.minusWord# wild2 __word 9)
                                          __word 4) of wild3 {
                                  GHC.Types.False
                                  -> case wild2 of wild4 {
                                       DEFAULT
                                       -> GHC.Base.Nothing @ (GHC.Types.Char, [GHC.Types.Char])
                                       __word 160
                                       -> GHC.Base.Just
                                            @ (GHC.Types.Char, [GHC.Types.Char])
                                            (ww, xs) }
                                  GHC.Types.True
                                  -> GHC.Base.Just @ (GHC.Types.Char, [GHC.Types.Char]) (ww, xs) }
                             __word 32
                             -> GHC.Base.Just
                                  @ (GHC.Types.Char, [GHC.Types.Char])
                                  (ww, xs) } } } }) -}
5c52e53f2eb1a2ca6210fbe21ca82f77
  zeroOrMore :: Parser.Parser a -> Parser.Parser [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,C(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

