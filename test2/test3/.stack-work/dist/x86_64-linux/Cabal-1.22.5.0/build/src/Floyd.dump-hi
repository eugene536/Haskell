
==================== FINAL INTERFACE ====================
2016-11-07 13:58:51.76059 UTC

interface test2_JQULrSP5qhp1sMjou4dkJT:Floyd 7103
  interface hash: ec9356df812ea490989403ee1c4ccd3c
  ABI hash: d618e6461d4ea5df681269ffe302cf84
  export-list hash: f55c79bcd47eda178b1b29740814ca75
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Floyd.floyd
  Floyd.floyd'
  Floyd.getInitDp
  Floyd.readGraph
  Floyd.Dp
  Floyd.Graph
  Floyd.Vertex
  Floyd.Weight
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array.Base a0576aaf9a801948417a257cfc0c6084
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array.IO 9e0f4b24301f4139e7f74eb2870eea99
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IOArray de116b98d9585848371a26e341ce1957
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
5c4e496da4698879e8d85f981d688813
  $wa ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IOArray.IOArray
            Floyd.Vertex
            (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight)) #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Int#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.IOArray.IOArray
                                 Floyd.Vertex
                                 (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight)) #)
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Prim.Int#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# x 0) of wild2 {
                       GHC.Types.False
                       -> let {
                            wild1 :: GHC.Types.Int = GHC.Types.I# ww
                          } in
                          case GHC.Prim.newArray#
                                 @ (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight))
                                 @ GHC.Prim.RealWorld
                                 x
                                 (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# 0 ww) of wild3 {
                                    GHC.Types.False
                                    -> case GHC.Prim.newArray#
                                              @ GHC.Types.Int
                                              @ GHC.Prim.RealWorld
                                              0
                                              Floyd.readGraph7
                                              eta2 of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          (GHC.Arr.STArray
                                             @ GHC.Prim.RealWorld
                                             @ Floyd.Vertex
                                             @ GHC.Types.Int
                                             Floyd.readGraph7
                                             wild1
                                             0
                                             ipv1)
                                            `cast`
                                          (Sym (GHC.IOArray.NTCo:IOArray[0]) <Floyd.Vertex>_N <GHC.Types.Int>_N) #) }
                                    GHC.Types.True
                                    -> let {
                                         x1 :: GHC.Prim.Int# = GHC.Prim.+# ww 1
                                       } in
                                       case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.<# x1 0) of wild5 {
                                         GHC.Types.False
                                         -> case GHC.Prim.newArray#
                                                   @ GHC.Types.Int
                                                   @ GHC.Prim.RealWorld
                                                   x1
                                                   Floyd.readGraph7
                                                   eta2 of ds1 { (#,#) ipv ipv1 ->
                                            (# ipv,
                                               (GHC.Arr.STArray
                                                  @ GHC.Prim.RealWorld
                                                  @ Floyd.Vertex
                                                  @ GHC.Types.Int
                                                  Floyd.readGraph7
                                                  wild1
                                                  x1
                                                  ipv1)
                                                 `cast`
                                               (Sym (GHC.IOArray.NTCo:IOArray[0]) <Floyd.Vertex>_N <GHC.Types.Int>_N) #) }
                                         GHC.Types.True
                                         -> case GHC.Arr.negRange
                                            ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      GHC.IOArray.IOArray
                                                        Floyd.Vertex GHC.Types.Int #)
                                            of {} } })
                                   `cast`
                                 (Sym (GHC.Types.NTCo:IO[0]
                                           <GHC.IOArray.IOArray Floyd.Vertex GHC.Types.Int>_R))
                                 w of ds1 { (#,#) ipv ipv1 ->
                          (# ipv,
                             (GHC.Arr.STArray
                                @ GHC.Prim.RealWorld
                                @ Floyd.Vertex
                                @ (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight))
                                Floyd.readGraph7
                                wild1
                                x
                                ipv1)
                               `cast`
                             (Sym (GHC.IOArray.NTCo:IOArray[0]) <Floyd.Vertex>_N <GHC.Types.IO
                                                                                    (GHC.IOArray.IOArray
                                                                                       Floyd.Vertex
                                                                                       Floyd.Weight)>_N) #) }
                       GHC.Types.True
                       -> case GHC.Arr.negRange
                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    GHC.IOArray.IOArray
                                      Floyd.Vertex
                                      (GHC.Types.IO
                                         (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight)) #)
                          of {} }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# 0 ww) of wild3 {
                   GHC.Types.False -> $j 0
                   GHC.Types.True -> $j (GHC.Prim.+# ww 1) }) -}
e25ab1590fc037db303199cbe2d63dad
  $wfloyd' ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Floyd.Graph -> GHC.Types.Int
  {- Arity: 4, Strictness: <L,U><L,U><S,U><L,U>, Inline: [0] -}
3e8548782ac0eeba815e1fed3a1a9075
  type Dp =
    GHC.Types.IO
      (GHC.IOArray.IOArray
         Floyd.Vertex
         (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight)))
4f8dcb33d037ade7853d9c83a57649fd
  type Graph = [[(Floyd.Vertex, Floyd.Weight)]]
de6301001dd778e254a4154372dec857
  type Vertex = GHC.Types.Int
9d04ec013308b13bc0d7a110a1d372cb
  type Weight = GHC.Types.Int
c92c88040a9bc2073ac60ad08da26db9
  floyd :: GHC.Types.Int
  {- Unfolding: (Floyd.$wfloyd' 0 1 1 Floyd.readGraph) -}
701321b0a1eec784e0efe5b9e7d11746
  floyd' ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
    -> Floyd.Graph -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSS(S)),1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
                   w1 :: Floyd.Graph ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case ww2 of ww6 { GHC.Types.I# ww7 ->
                 case ww3 of ww8 { GHC.Types.I# ww9 ->
                 Floyd.$wfloyd' ww5 ww7 ww9 w1 } } } }) -}
2a0f46dc6e8cea759e135d5266a24130
  getInitDp :: GHC.Types.Int -> Floyd.Dp
  {- Arity: 2, Strictness: <S,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Floyd.getInitDp1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.IOArray.IOArray
                                  Floyd.Vertex
                                  (GHC.Types.IO
                                     (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight))>_R)) -}
7a64a723551c83d54bac84d4e50ce0ae
  getInitDp1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IOArray.IOArray
            Floyd.Vertex
            (GHC.Types.IO (GHC.IOArray.IOArray Floyd.Vertex Floyd.Weight)) #)
  {- Arity: 2, Strictness: <S,1*U(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Floyd.$wa ww1 w1 }) -}
3c689b4d794c21f42862e81bc61bbf55
  readGraph :: Floyd.Graph
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [(Floyd.Vertex, Floyd.Weight)]
                   Floyd.readGraph1
                   (GHC.Types.[] @ [(Floyd.Vertex, Floyd.Weight)])) -}
ad97eeee91b47cc37e73f75e34c05ef3
  readGraph1 :: [(Floyd.Vertex, Floyd.Weight)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Floyd.Vertex, Floyd.Weight)
                   Floyd.readGraph6
                   Floyd.readGraph2) -}
c62f68f1423e51453bea1546a83b0d29
  readGraph2 :: [(Floyd.Vertex, Floyd.Weight)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Floyd.Vertex, Floyd.Weight)
                   Floyd.readGraph3
                   (GHC.Types.[] @ (Floyd.Vertex, Floyd.Weight))) -}
dc9ec8fd02f7c4333d6c2cf4f4e61ed9
  readGraph3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Floyd.readGraph5, Floyd.readGraph4)) -}
99c6fae93887cd0eae1ab2c21a43ff02
  readGraph4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10) -}
f859e41f612397e30ceb7db09f12add8
  readGraph5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
64ea781096246ecb299cd2160d5ac530
  readGraph6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Floyd.readGraph7, Floyd.readGraph7)) -}
91c254d011835f4a8d042ed84c58a43f
  readGraph7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

